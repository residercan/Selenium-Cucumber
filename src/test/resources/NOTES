*****Cucumber Kurulumu*****
-Cucumber page object model icin olusturduugmunuz klasorler :
    pages -> page objectler
    runners -> test caseleri run etmek, raporlar eklemek, feature file ile step definitionslari birlestirmek icin
    stepdefinitions -> java kodlari
    utilities -> reusable metotlar, driver, configreader,..
-Cucumber feature klasoru
    Tum feature file lar bu klasore gider
    Tum test caseler gherken dilinde bu klasorde yazilir
-----------19 Subat 2023---------------------------
1. Feature file olustur: ilkfeaturefile.feature
Feature: ilk feature file
  Scenario: TC01_google_iphone_arama
    Given kullanici google gider
    When kullanici iphone için arama yapar
    Then sonuclarda iphone oldugunu dogrular
2. Runner classini run et
3. Console dan missing step definitions lari kopyala
4. stepdefinitions klasorunde GoggleStepDefinitions class i olustur ve oraya yapistir
    @Given("kullanici google gider")
    public void kullanici_google_gider() {
    }
    @When("kullanici iphone için arama yapar")
    public void kullanici_iphone_için_arama_yapar() {
    }
    @Then("sonuclarda iphone oldugunu dogrular")
    public void sonuclarda_iphone_oldugunu_dogrular() {
    }
5. Step definitionslara gerekli java kodlarini yaz
    @Given("kullanici google gider")
    public void kullanici_google_gider() {
        Driver.getDriver().get(ConfigReader.getProperty("google_url"));
    }
    NOTE: ELementleri bulmak icin page paketini kullan
    public GooglePage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }
    @FindBy(xpath = "(//div[@class='QS5gu sy4vM'])[2]")
    public WebElement popUpAccept;
    @FindBy(name = "q")
    public WebElement searchBox;
---------Scenario Outline-----------------
#Scenario -> Scenario Outline
#"" -> "<sutun_ismi>"
#Example kelimesi Scenario Outline dan sonra kullanilmali
#Example verilerin kullanildagi yerdir
----------
Scenario Outline Data Driven Testing icin kullanilir
Yani benzer scenarioyu tekrar tekrar farkli datalarda calistirmak icin kullanilir
Scenario Outline cucumber cok Onemlidir.
Ne zaman birden fazla data ile islem yaparsak, zaman scenario outline kullanabiliriz.
Scenario Outline Excel ile atomasyon yapmaya benzer, tek fark, kullanimi daha kolaydir


----------------------------------------------------------------
Scenari Outline ile DDT yapılabilir. Scenario Outline iyi bilinmelidir.
Test adimlarini(STEPS) data reusable yapmak icin kullanilir
En çok kullanılan cucumber ozelliklerinden biridir
Examples kelisi veri girisleri icin kullanilmalidir
Step definitionslardaki data tipi STRINGdir
Examples kelimesi en sonda kullanilir

Data Tables ile DDT yapılabilir
Test adimlarini(STEPS) data reusable yapmak icin kullanilir
Scenari Outline kadar yaygın degildir
Examples kelimesi kullanılmaz
Step definitionslardaki data tipi DATATABLE
DataTablelar ara adimlardada(STEPS) kullanilabilir

NOT: Datatables ve Scenario Outline birlikle kullanilabilir

----------------------------------------------------------------

Collectionslar nelerdir? -> list, set, queue
Collectionslari frameworkunde nasıl kullandın? -> Collectionslari ozellikle coklu data ihtiyacimiz oldugunda kullanırız.
Ornegin, findElements metotu kullanildiginda birden fazla element beklediğim icin, List<WebElement> kullanırız.
Yada, çoklu pencere geçişlerinde getWindowHandles ile Set kullanırız.
Dropdowndaki tum elementleri getOptions metot ile aldigimda List<WebElement> e koyariz.
Frameforkumuzde bazı utility classlar kullanıyoruz. Bunlarin icince çok sayıda collections kullanıyoruz. Ornegin ExcelUtils datalarını list e koyan metotlarımız vardır.
Cucumberda DataTables kullandigimda, gelen verileri List yada Map de depolayabiliriz.

----------------------------------------------------------------

EXCEL
1. Config Properties'e URL'i ekleyin:
app_url=https://www.bluerentalcars.com
2. Feature file olusturun:
@excel_automation
Feature: excel_login_feature
  Scenario: TC01_musteri_giris_testi
    Given kullanici "customer_info" bilgileri ile giris yapar
3. Step Definitions:
package stepdefinitions;
import io.cucumber.java.en.Given;
import pages.HomePage;
import pages.LoginPage;
import utilities.ConfigReader;
import utilities.Driver;
import utilities.ExcelUtils;
import utilities.ReusableMethods;
import java.io.IOException;
import java.util.List;
import java.util.Map;
public class ExcelStepDefinitions {
//Page Objelerini Olustur
    HomePage homePage;
    LoginPage loginPage;
    ExcelUtils excelUtils;
    List<Map<String,String>> excelData;
    @Given("kullanici {string} bilgileri ile giris yapar")
    public void kullanici_bilgileri_ile_giris_yapar(String string) {
        String path="src/test/resources/testdata/mysmoketestdata.xlsx";
        String sayfa = "customer_info";
        excelUtils= new ExcelUtils(path,sayfa);
        excelData=excelUtils.getDataList();
//        NOTE Loop kodunu tamamla
        excelData.forEach(data -> {
            Driver.getDriver().get(ConfigReader.getProperty("app_url"));
            homePage = new HomePage();
            loginPage = new LoginPage();
            homePage.firstLogin.click();
            ReusableMethods.waitFor(1);
            loginPage.email.sendKeys(data.get("username"));
            loginPage.password.sendKeys(data.get("password"));
            loginPage.login.click();
            ReusableMethods.verifyElementDisplayed(homePage.userID);
            try {
                ReusableMethods.getScreenshot("LoginScreenshot");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            homePage.userID.click();
            ReusableMethods.waitFor(1);
            homePage.logOutLink.click();
            ReusableMethods.waitFor(1);
            homePage.OK.click();
            ReusableMethods.waitFor(1);
        });
    }
}
4. HomePage;
package pages;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utilities.Driver;
public class HomePage {
    public HomePage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }
    @FindBy(xpath = "(//a[@role='button'])[1]")
    public WebElement firstLogin;
    @FindBy(id = "dropdown-basic-button")
    public WebElement userID;
    @FindBy(xpath = "//a[text()='Logout']")
    public WebElement logOutLink;
    @FindBy(xpath = "//button[contains(text(),'OK')]")
    public WebElement OK;
}
5. LoginPage
package pages;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utilities.Driver;
public class LoginPage {
    public LoginPage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }
    @FindBy(xpath = "//input[@id='formBasicEmail']")
    public WebElement email;
    @FindBy(xpath = "//input[@id='formBasicPassword']")
    public WebElement password;
    @FindBy(xpath = "//button[text()=' Login']")
    public WebElement login;
}
6. Runner
package runners;
import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;
@RunWith(Cucumber.class)
@CucumberOptions(
        plugin = {
                "pretty",//raporlarin daha okunakli olmasi icin
                "html:target/default-cucumber-reports" + ".html",
                "json:target/json-reports/cucumber.json",
                "junit:target/xml-report/cucumber.xml"
        },
        monochrome = true,//raporlarin console'da okunakli sekilde cikmasi icin
        features = "src/test/resources/features",//features folder path
        glue = {"stepdefinitions", "hooks"},   //stepdefinitions path
        tags = "@excel_automation",
        dryRun = false
)
public class Runner {
}
//Bu sinif Test caseleri RUN etmek icin kullanilir
//Ve konfigurasyonlar icin kullanilir
//Runner class, features file lar ile step defitions i birbirile baglar